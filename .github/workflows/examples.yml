name: CI/CD Pipeline - Node.js with Docker and AWS

on:
  push:
    branches:
      - main

jobs:
  # CI: Build & Test Node.js App
  build-stage:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

  # Build & Push Docker Image to ECR
  docker-build-push:
    name: Build & Push Docker Image
    needs: build-stage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Tag Docker Image
        env:
          IMAGE_TAG: latest
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t myapp:$IMAGE_TAG .
          docker tag myapp:$IMAGE_TAG $ECR_REGISTRY/myapp:$IMAGE_TAG

      - name: Push Docker Image to ECR
        env:
          IMAGE_TAG: latest
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/myapp:$IMAGE_TAG

  # Deploy to EC2 Instance via SSH
  deploy:
    name: Deploy to EC2
    needs: docker-build-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export REGISTRY=${{ steps.login-ecr.outputs.registry }}
            export REPO_NAME=myapp
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REGISTRY
            docker pull $REGISTRY/$REPO_NAME:latest
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 80:80 $REGISTRY/$REPO_NAME:latest
